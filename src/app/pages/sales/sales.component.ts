// File: sales.component.ts
import { Component, OnInit } from '@angular/core';
import { CommonModule, Location } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { NzTableModule } from 'ng-zorro-antd/table';
import { NzDatePickerModule } from 'ng-zorro-antd/date-picker';
import { NzInputModule } from 'ng-zorro-antd/input';
import { NzButtonModule } from 'ng-zorro-antd/button';
import { NzIconModule } from 'ng-zorro-antd/icon';
import { NzPaginationModule } from 'ng-zorro-antd/pagination';
import { NzModalService } from 'ng-zorro-antd/modal';
import { NzModalModule } from 'ng-zorro-antd/modal';
import { AddInvoiceComponent } from './add-invoice/add-invoice.component';
import { Router, RouterModule } from '@angular/router';
import { NzMessageService } from 'ng-zorro-antd/message';
import { NzMessageModule } from 'ng-zorro-antd/message';
import { InvoiceService } from '../../services/invoice.service';
import { Invoice, InvoiceQueryParams } from '../../models/invoice.model';
import { finalize } from 'rxjs/operators';

@Component({
    selector: 'app-sales',
    standalone: true,
    imports: [
        CommonModule,
        FormsModule,
        NzTableModule,
        NzDatePickerModule,
        NzInputModule,
        NzButtonModule,
        NzIconModule,
        NzPaginationModule,
        RouterModule,
        NzModalModule,
        NzMessageModule
    ],
    templateUrl: './sales.component.html',
    styleUrls: ['./sales.component.scss']
})
export class SalesComponent implements OnInit {
    fromDate: Date | null = null;
    toDate: Date | null = null;
    searchText: string = '';
    selectedStatus: string = '';
    isAddModalVisible = false;

    // C√°c thu·ªôc t√≠nh ph√¢n trang
    currentPage: number = 1;
    pageSize: number = 10;
    totalItems: number = 0;

    // D·ªØ li·ªáu h√≥a ƒë∆°n
    salesData: Invoice[] = [];
    filteredData: Invoice[] = [];

    // Tr·∫°ng th√°i loading
    loading: boolean = false;

    constructor(
        private modal: NzModalService,
        private router: Router,
        private message: NzMessageService,
        private invoiceService: InvoiceService,
        private location: Location
    ) { }

    ngOnInit(): void {
        const state = this.location.getState() as { updated?: boolean };

        if (state?.updated) {
            this.message.success('C·∫≠p nh·∫≠t h√≥a ƒë∆°n th√†nh c√¥ng!');
        }

        this.loadInvoices();
    }



    loadInvoices(): void {
        this.loading = true;
        console.log('‚è≥ B·∫Øt ƒë·∫ßu t·∫£i danh s√°ch h√≥a ƒë∆°n...');

        // Chu·∫©n b·ªã tham s·ªë cho API
        const params: InvoiceQueryParams = {
            pageNumber: this.currentPage,
            pageSize: this.pageSize,
            searchTerm: this.searchText || undefined,  // N·∫øu kh√¥ng c√≥ t·ª´ kh√≥a t√¨m ki·∫øm, s·ª≠ d·ª•ng undefined
            invoiceStatus: this.selectedStatus || undefined,  // N·∫øu kh√¥ng c√≥ tr·∫°ng th√°i, s·ª≠ d·ª•ng undefined
            invoiceDate: this.fromDate ? this.formatDate(this.fromDate) : undefined,  // ƒê·ªãnh d·∫°ng ng√†y n·∫øu c√≥
            paymentDate: this.toDate ? this.formatDate(this.toDate) : undefined  // ƒê·ªãnh d·∫°ng ng√†y n·∫øu c√≥
        };


        // G·ªçi API ƒë·ªÉ t·∫£i danh s√°ch h√≥a ƒë∆°n
        this.invoiceService.getInvoices(params)
            .pipe(
                finalize(() => {
                    this.loading = false;
                })
            )
            .subscribe({
                next: (response) => {

                    if (response && response.data) {
                        this.salesData = response.data;
                        this.filteredData = [...this.salesData];
                        this.totalItems = response.total;
                    } else {
                        this.message.error('D·ªØ li·ªáu tr·∫£ v·ªÅ kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i sau.');
                    }
                },
                error: (error) => {
                    this.message.error('Kh√¥ng th·ªÉ t·∫£i danh s√°ch h√≥a ƒë∆°n. Vui l√≤ng th·ª≠ l·∫°i sau.');
                }
            });
    }


    getInvoiceStatusText(status: string): string {
        switch (status) {
            case 'Paid':
                return 'ƒê√£ thanh to√°n';
            case 'Unpaid':
                return 'Ch∆∞a thanh to√°n';
            case 'Rejected':
                return 'B·ªã t·ª´ ch·ªëi';
            default:
                return 'Kh√¥ng x√°c ƒë·ªãnh';
        }
    }


    // ƒê·ªãnh d·∫°ng ng√†y th√†nh chu·ªói YYYY-MM-DD ƒë·ªÉ g·ª≠i l√™n API
    private formatDate(date: Date): string {
        return date.toISOString().split('T')[0];
    }

    // T√¨m ki·∫øm h√≥a ƒë∆°n
    onSearch() {
        this.currentPage = 1;
        this.loadInvoices();
    }

    // L·ªçc theo tr·∫°ng th√°i
    filterByStatus(status: string) {
        this.selectedStatus = status;
        this.currentPage = 1;
        this.loadInvoices();
    }

    // M·ªü modal th√™m m·ªõi h√≥a ƒë∆°n
    onAdd() {
        const modalRef = this.modal.create({
            nzTitle: 'Th√™m m·ªõi h√≥a ƒë∆°n b√°n h√†ng',
            nzContent: AddInvoiceComponent,
            nzWidth: 1200,
            nzFooter: null,
            nzClosable: true,
            nzMaskClosable: false,
            nzStyle: { top: '20px' },
            nzClassName: 'add-invoice-modal',
            nzData: {
                // C√≥ th·ªÉ truy·ªÅn tham s·ªë cho component n·∫øu c·∫ßn
            }
        });

        // ƒêƒÉng k√Ω callback sau khi modal ƒë√≥ng
        modalRef.afterClose.subscribe((result: any) => {
            // N·∫øu k·∫øt qu·∫£ tr·∫£ v·ªÅ l√† true (ƒë√£ t·∫°o h√≥a ƒë∆°n th√†nh c√¥ng)
            if (result) {
                this.loadInvoices(); // T·∫£i l·∫°i danh s√°ch h√≥a ƒë∆°n
            }
        });
    }

    // M·ªü giao di·ªán xem chi ti·∫øt ho√° ƒë∆°n (ch·ªâ xem)
    viewInvoice(invoiceId: string) {
        this.router.navigate(['/sales/invoice-detail', invoiceId], { queryParams: { mode: 'view' } });
    }

    // M·ªü giao di·ªán ch·ªânh s·ª≠a ho√° ƒë∆°n
    editInvoice(invoiceId: string) {
        this.router.navigate(['/sales/invoice-update', invoiceId], { queryParams: { mode: 'edit' } });
    }

    // M·ªü giao di·ªán ch·ªânh s·ª≠a h√≥a ƒë∆°n
    onEdit(item: any) {
        console.log('üìù S·ª≠a:', item);
        this.editInvoice(item.invoiceCode);
    }

    // X√≥a h√≥a ƒë∆°n v√† chi ti·∫øt
    onDelete(item: any) {
        this.modal.confirm({
            nzTitle: 'X√°c nh·∫≠n x√≥a h√≥a ƒë∆°n',
            nzContent: `B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a h√≥a ƒë∆°n ${item.invoiceCode} kh√¥ng? 
                       <br><br>
                       <strong>L∆∞u √Ω:</strong> H√†nh ƒë·ªông n√†y s·∫Ω x√≥a c·∫£ h√≥a ƒë∆°n v√† chi ti·∫øt h√≥a ƒë∆°n. 
                       D·ªØ li·ªáu s·∫Ω kh√¥ng th·ªÉ kh√¥i ph·ª•c.`,
            nzOkText: 'X√≥a',
            nzOkType: 'primary',
            nzOkDanger: true,
            nzOnOk: () => this.deleteInvoice(item.invoiceCode),
            nzCancelText: 'H·ªßy',
            nzWidth: 420,
            nzCentered: true,
            nzClassName: 'custom-delete-modal'
        });
    }

    // Th·ª±c hi·ªán x√≥a h√≥a ƒë∆°n v√† chi ti·∫øt
    deleteInvoice(invoiceCode: string) {
        this.loading = true;

        this.invoiceService.deleteInvoice(invoiceCode)
            .pipe(finalize(() => this.loading = false))
            .subscribe({
                next: () => {
                    // Sau khi x√≥a th√†nh c√¥ng, t·∫£i l·∫°i danh s√°ch
                    this.message.success('X√≥a h√≥a ƒë∆°n th√†nh c√¥ng');
                    this.loadInvoices();
                },
                error: (error) => {
                    console.error('Error deleting invoice:', error);
                    this.message.error('Kh√¥ng th·ªÉ x√≥a h√≥a ƒë∆°n. Vui l√≤ng th·ª≠ l·∫°i sau.');
                }
            });
    }

    // X·ª≠ l√Ω s·ª± ki·ªán thay ƒë·ªïi trang
    onPageChange(pageIndex: number): void {
        this.currentPage = pageIndex;
        this.loadInvoices();
    }

    // X·ª≠ l√Ω s·ª± ki·ªán thay ƒë·ªïi s·ªë l∆∞·ª£ng m·ª•c tr√™n m·ªói trang
    onPageSizeChange(size: number): void {
        this.pageSize = size;
        this.currentPage = 1; // Reset v·ªÅ trang ƒë·∫ßu ti√™n khi thay ƒë·ªïi k√≠ch th∆∞·ªõc trang
        this.loadInvoices();
    }
}